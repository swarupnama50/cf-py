#screenshot not worked


import base64
import uuid
import json
from flask import Flask, request, jsonify, send_file
import requests
import os
from dotenv import load_dotenv
from flask_cors import CORS
from urllib.parse import quote
import logging

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.DEBUG)

# Initialize Flask app
app = Flask(__name__)
CORS(app)

# Load Cashfree credentials from environment variables
CASHFREE_APP_ID = os.getenv('CASHFREE_APP_ID')
CASHFREE_SECRET_KEY = os.getenv('CASHFREE_SECRET_KEY')
CASHFREE_API_URL = os.getenv('CASHFREE_API_URL', 'https://sandbox.cashfree.com/pg/orders')

# Directory for storing screenshots
UPLOAD_FOLDER = 'screenshots'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

@app.route('/create_order', methods=['POST'])
def create_order():
    try:
        data = request.json
        logging.debug(f"Request data: {data}")

        order_id = data.get('order_id', str(uuid.uuid4()))
        order_amount = data.get('order_amount')
        order_currency = 'INR'
        customer_id = data.get('customer_id', 'default_customer_id')
        customer_name = data.get('customer_name', 'teerkhelo')
        customer_email = data.get('customer_email', 'teerkhelo@gmail.com')
        customer_phone = data.get('customer_phone', '9612388891')

        return_url = (
            f'http://localhost:14794/payment_response?order_id={quote(str(order_id))}'
            f'&status=success'
        )

        headers = {
            'Content-Type': 'application/json',
            'x-client-id': CASHFREE_APP_ID,
            'x-client-secret': CASHFREE_SECRET_KEY,
            'x-api-version': '2023-08-01'
        }

        payload = {
            'order_id': order_id,
            'order_amount': order_amount,
            'order_currency': order_currency,
            'customer_details': {
                'customer_id': customer_id,
                'customer_name': customer_name,
                'customer_email': customer_email,
                'customer_phone': customer_phone
            },
            'order_meta': {
                'return_url': return_url
            }
        }

        logging.debug(f"Payload: {payload}")
        response = requests.post(CASHFREE_API_URL, json=payload, headers=headers)
        response_data = response.json()

        logging.debug(f"Response: {response_data}")

        if response.status_code == 200:
            payment_session_id = response_data.get('payment_session_id', '')
            if payment_session_id:
                return jsonify({
                    'order_id': order_id,
                    'payment_session_id': payment_session_id
                })
            else:
                return jsonify({'error': 'Payment session ID not found'}), 500
        else:
            return jsonify({'error': response_data.get('message', 'Unknown error occurred')}), response.status_code

    except Exception as e:
        logging.error(f"Exception occurred: {e}")
        return jsonify({'error': 'An error occurred', 'details': str(e)}), 500


@app.route('/initiate_payment', methods=['POST'])
def initiate_payment():
    data = request.json
    order_id = data.get('order_id')
    order_amount = data.get('order_amount')

    payment_url = "https://sandbox.cashfree.com/checkout"

    payload = {
        'order_id': order_id,
        'order_amount': order_amount,
        'order_currency': 'INR',
        'return_url': f'http://localhost:14794/payment_response?order_id={order_id}'
    }

    response = requests.post(payment_url, json=payload, headers={
        'Content-Type': 'application/json',
        'x-client-id': CASHFREE_APP_ID,
        'x-client-secret': CASHFREE_SECRET_KEY,
    })

    if response.status_code == 200:
        data = response.json()
        return jsonify({'payment_url': data.get('payment_url')})
    else:
        logging.error(f"Failed to initiate payment: {response.text}")
        return jsonify({'error': 'Failed to initiate payment'}), response.status_code

@app.route('/payment_response', methods=['GET'])
def payment_response():
    data = request.args.to_dict()
    order_id = data.get('order_id')
    user_name = data.get('customer_name')
    user_mobile_number = data.get('customer_phone')

    # Verify the payment with Cashfree
    payment_verification_url = f'https://sandbox.cashfree.com/pg/orders/{order_id}'
    headers = {
        'x-client-id': CASHFREE_APP_ID,
        'x-client-secret': CASHFREE_SECRET_KEY,
    }

    verification_response = requests.get(payment_verification_url, headers=headers)
    verification_data = verification_response.json()

    if verification_response.status_code == 200 and verification_data.get('order_status') == 'PAID':
        # Payment is verified
        return jsonify({
            'message': 'Payment verified',
            'order_id': order_id,
            'status': 'success',
            'redirect_url': 'image_screen',
            'user_name': user_name, # Include userName
            'user_mobile_number': user_mobile_number # Include userMobileNumber
        })
    else:
        logging.error(f"Payment verification failed: {verification_data}")
        return jsonify({
            'message': 'Payment verification failed',
            'order_id': order_id,
            'status': 'failed'
        })

@app.route('/payment_notification', methods=['POST'])
def payment_notification():
    data = request.form.to_dict()
    # Handle payment notification, usually updating the order status based on the notification.
    logging.debug(f"Payment notification received: {data}")
    return jsonify({'message': 'Payment notification received', 'data': data})


@app.route('/upload_screenshot', methods=['POST'])
def upload_screenshot():
    try:
        order_id = request.form.get('order_id')
        screenshot_data = request.form.get('screenshot')  # Assuming base64-encoded data URL

        if not screenshot_data:
            return jsonify({'error': 'No screenshot data provided'}), 400

        # Remove the prefix of the data URL
        screenshot_data = screenshot_data.split(',')[1]
        screenshot_bytes = base64.b64decode(screenshot_data)

        filename = f"{order_id}.png"
        filepath = os.path.join(UPLOAD_FOLDER, filename)

        with open(filepath, 'wb') as f:
            f.write(screenshot_bytes)

        return jsonify({'message': 'Screenshot uploaded successfully', 'filepath': filepath}), 200
    except Exception as e:
        logging.error(f"Exception occurred: {e}")
        return jsonify({'error': 'An error occurred while uploading the screenshot', 'details': str(e)}), 500




@app.route('/get_screenshot/<order_id>', methods=['GET'])
def get_screenshot(order_id):
    try:
        filepath = os.path.join(UPLOAD_FOLDER, f"{order_id}.png")
        if os.path.exists(filepath):
            return send_file(filepath, mimetype='image/png')
        else:
            return jsonify({'error': 'Screenshot not found'}), 404
    except Exception as e:
        logging.error(f"Exception occurred: {e}")
        return jsonify({'error': 'An error occurred while retrieving the screenshot', 'details': str(e)}), 500


if __name__ == '__main__':
    # Ensure environment variables are set
    if not CASHFREE_APP_ID or not CASHFREE_SECRET_KEY:
        raise ValueError("CASHFREE_APP_ID and CASHFREE_SECRET_KEY must be set in the environment variables")
    
    app.run(debug=True, host='127.0.0.1', port=5000)
